export const abis = {
  shop: [
    'constructor(uint256 _salePrice, address _funder, address _paymentToken, address _saleToken, uint256 _startTime, uint256 _endTime, uint256 _maxTotalPayment)',
    'event Cash(address indexed sender, uint256 paymentTokenBalance, uint256 saleTokenBalance)',
    'event EmergencyTokenRetrieve(address indexed sender, uint256 amount)',
    'event Fund(address indexed sender, uint256 amount)',
    'event OptInBuyback(address indexed user)',
    'event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)',
    'event Purchase(address indexed sender, uint256 paymentAmount)',
    'event PurchaseWithCode(address indexed sender, uint256 paymentAmount, string code)',
    'event SetCasher(address indexed casher)',
    'event SetCliffVestingPeriod(tuple(uint256 claimTime, uint8 pct)[] indexed cliffPeriod)',
    'event SetFunder(address indexed funder)',
    'event SetLinearVestingEndTime(uint256 indexed linearVestingEndTime)',
    'event SetMaxTotalPurchasable(uint256 indexed _maxTotalPurchasable)',
    'event SetMinTotalPayment(uint256 indexed minTotalPayment)',
    'event SetWhitelist(bytes32 indexed whitelistRootHash)',
    'event SetWhitelistSetter(address indexed whitelistSetter)',
    'event SetWithdrawDelay(uint24 indexed withdrawDelay)',
    'event Withdraw(address indexed sender, uint256 amount)',
    'function amountPerCode(string) view returns (uint256)',
    'function buybackClaimableNumber() view returns (uint256)',
    'function cash()',
    'function casher() view returns (address)',
    'function checkWhitelist(address user, bytes32[] merkleProof) view returns (bool)',
    'function checkWhitelist(address user, bytes32[] merkleProof, uint256 allocation) view returns (bool)',
    'function claimable(address) view returns (uint256)',
    'function cliffPeriod(uint256) view returns (uint256 claimTime, uint8 pct)',
    'function emergencyTokenRetrieve(address token)',
    'function endTime() view returns (uint256)',
    'function fund(uint256 amount)',
    'function funder() view returns (address)',
    'function getCliffPeriod() view returns (tuple(uint256 claimTime, uint8 pct)[])',
    'function getCurrentClaimableToken(address user) view returns (uint256)',
    'function getMaxPayment(address user, uint256 allocation) view returns (uint256)',
    'function getUnlockedToken(uint256 totalPurchased, uint256 claimable, address user) view returns (uint256)',
    'function hasCashed() view returns (bool)',
    'function hasOptInBuyback(address) view returns (bool)',
    'function hasWithdrawn(address) view returns (bool)',
    'function latestClaimTime(address) view returns (uint256)',
    'function linearVestingEndTime() view returns (uint256)',
    'function maxTotalPayment() view returns (uint256)',
    'function maxTotalPurchasable() view returns (uint256)',
    'function minTotalPayment() view returns (uint256)',
    'function optInBuyback()',
    'function owner() view returns (address)',
    'function paymentReceived(address) view returns (uint256)',
    'function paymentToken() view returns (address)',
    'function purchase(uint256)',
    'function purchaserCount() view returns (uint32)',
    'function renounceOwnership()',
    'function saleAmount() view returns (uint256)',
    'function salePrice() view returns (uint256)',
    'function saleTokenPurchased() view returns (uint256)',
    'function setBuybackClaimableNumber(uint256 _buybackClaimableNumber)',
    'function setCasher(address _casher)',
    'function setCliffPeriod(uint256[] claimTimes, uint8[] pct)',
    'function setFunder(address _funder)',
    'function setLinearVestingEndTime(uint256 _vestingEndTime)',
    'function setMaxTotalPurchasable(uint256 _maxTotalPurchasable)',
    'function setMinTotalPayment(uint256 _minTotalPayment)',
    'function setVestedGiveaway(bool _isVestedGiveaway)',
    'function setVestingEditable(bool _vestingEditableOverride)',
    'function setWhitelist(bytes32 _whitelistRootHash)',
    'function setWhitelistSetter(address _whitelistSetter)',
    'function setWithdrawDelay(uint24 _withdrawDelay)',
    'function startTime() view returns (uint256)',
    'function totalPaymentReceived() view returns (uint256)',
    'function totalPurchased(address) view returns (uint256)',
    'function transferOwnership(address newOwner)',
    'function uniqueUsePerCode(string) view returns (uint256)',
    'function vestingEditableOverride() view returns (bool)',
    'function whitelistRootHash() view returns (bytes32)',
    'function whitelistSetter() view returns (address)',
    'function whitelistedPurchase(uint256, bytes32[]) pure',
    'function whitelistedPurchase(uint256 paymentAmount, bytes32[] merkleProof, uint256 allocation)',
    'function whitelistedPurchaseWithCode(uint256 paymentAmount, bytes32[] merkleProof, uint256 allocation, string code)',
    'function withdraw()',
    'function withdrawDelay() view returns (uint24)',
    'function withdrawGiveaway(bytes32[]) pure',
    'function withdrawGiveaway(bytes32[] merkleProof, uint256 allocation)',
    'function withdrawGiveawayVested(bytes32[] merkleProof, uint256 allocation)',
    'function withdrawTime() view returns (uint256)',
    'function withdrawerCount() view returns (uint32)',
    'function publicAllocation() view returns (uint256)',
    'function saleToken() view returns (address)',
    'function isPurchaseHalted() view returns (bool)',
  ],
  erc20: [
    'constructor(string name_, string symbol_, uint8 decimals_, uint256 initialBalance_, address feeReceiver_) payable',
    'event Approval(address indexed owner, address indexed spender, uint256 value)',
    'event Transfer(address indexed from, address indexed to, uint256 value)',
    'function allowance(address owner, address spender) view returns (uint256)',
    'function approve(address spender, uint256 amount) returns (bool)',
    'function balanceOf(address account) view returns (uint256)',
    'function decimals() view returns (uint8)',
    'function decreaseAllowance(address spender, uint256 subtractedValue) returns (bool)',
    'function increaseAllowance(address spender, uint256 addedValue) returns (bool)',
    'function name() view returns (string)',
    'function symbol() view returns (string)',
    'function totalSupply() view returns (uint256)',
    'function transfer(address recipient, uint256 amount) returns (bool)',
    'function transferFrom(address sender, address recipient, uint256 amount) returns (bool)',
  ],
  multicall3: [
    'function aggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes[] returnData)',
    'function aggregate3(tuple(address target, bool allowFailure, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',
    'function aggregate3Value(tuple(address target, bool allowFailure, uint256 value, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',
    'function blockAndAggregate(tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)',
    'function getBasefee() view returns (uint256 basefee)',
    'function getBlockHash(uint256 blockNumber) view returns (bytes32 blockHash)',
    'function getBlockNumber() view returns (uint256 blockNumber)',
    'function getChainId() view returns (uint256 chainid)',
    'function getCurrentBlockCoinbase() view returns (address coinbase)',
    'function getCurrentBlockDifficulty() view returns (uint256 difficulty)',
    'function getCurrentBlockGasLimit() view returns (uint256 gaslimit)',
    'function getCurrentBlockTimestamp() view returns (uint256 timestamp)',
    'function getEthBalance(address addr) view returns (uint256 balance)',
    'function getLastBlockHash() view returns (bytes32 blockHash)',
    'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (tuple(bool success, bytes returnData)[] returnData)',
    'function tryBlockAndAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) payable returns (uint256 blockNumber, bytes32 blockHash, tuple(bool success, bytes returnData)[] returnData)'
  ]
}
